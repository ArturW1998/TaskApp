{"version":3,"sources":["serviceWorker.ts","constants/constants.ts","store/store.ts","reducers/tasks.ts","reducers/filters.ts","reducers/index.ts","components/todo-input/todo-input.tsx","components/todo-item/todo-item.tsx","components/todo-list/todo-list.tsx","components/footer/footer.tsx","containers/todo/todo.tsx","actions/actionCreator.ts","components/title/title.tsx","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ACTION_TYPES","preloadedState","FILTERS_BTN","text","id","savedTasks","load","namespace","initialState","tasks","action","type","ADD_TASK","payload","isCompleted","REMOVE_TASK","filter","COMPLETE_TASK","map","task","savedFilters","filters","CHANGE_FILTER","activeFilter","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","save","ToDoInput","value","onChange","onKeyPress","className","placeholder","ToDoItem","removeTask","completeTask","onClick","ToDoList","tasksList","key","Footer","amount","changeFilter","connector","connect","addTask","taskText","handleInputChange","target","setState","length","props","Date","getTime","filterTasks","getActiveTasksCounter","this","isTasksExist","filteredTasks","taskCounter","Component","Title","title","App","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","includes","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oVAaMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA4CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,ICpGrDC,E,sCAAAA,K,oBAAAA,E,0BAAAA,E,8BAAAA,E,+BAAAA,M,KAOL,ICIiBC,EDJXC,EAA2B,CACtC,CACEC,KAAM,MACNC,GAAI,OAEN,CACED,KAAM,SACNC,GAAI,UAEN,CACED,KAAM,YACNC,GAAI,cEbFC,EAAkBC,eAAK,CAAEC,UAAW,aAEpCC,EAA2BH,GAAcA,EAAWI,MAAQJ,EAAWI,MAAQ,GAwBtEA,EAtBD,WAAgE,IAA/DjB,EAA8D,uDAAtDgB,EAAcE,EAAwC,uCAC3E,OAAQA,EAAOC,MACb,KAAKX,EAAaY,SAChB,MAAM,GAAN,mBACKpB,GADL,CAEE,CACEY,GAAIM,EAAOG,QAAQT,GACnBD,KAAMO,EAAOG,QAAQV,KACrBW,YAAaJ,EAAOG,QAAQC,eAGlC,KAAKd,EAAae,YAChB,OAAO,YAAIvB,GAAOwB,QAAO,qBAAGZ,KAAgBM,EAAOG,QAAQT,MAC7D,KAAKJ,EAAaiB,cAChB,OAAO,YAAIzB,GAAO0B,KAAI,SAAAC,GAAI,OACxBA,EAAKf,KAAOM,EAAOG,QAAQT,GAA3B,2BAAqCe,GAArC,IAA2CL,aAAcK,EAAKL,cAAgBK,KAElF,QACE,OAAO3B,ICtBP4B,EAAoBd,eAAK,CAAEC,UAAW,aAEtCC,EAAuBY,GAAgBA,EAAaC,QAAUD,EAAaC,QAAU,MAW5EL,EATA,WAAwE,IAAvExB,EAAsE,uDAA9DgB,EAA8D,yCAA9CG,EAA8C,EAA9CA,KAAME,EAAwC,EAAxCA,QAC5C,OAAQF,GACN,KAAKX,EAAasB,cAChB,OAAOT,EAAQU,aACjB,QACE,OAAO/B,ICTEgC,EAFKC,YAAgB,CAAEhB,QAAOY,YHCvCK,EAKAC,IAYSC,GAVS3B,EAQK,GAP3B4B,YACEL,EACAvB,EACAyB,EAAiBI,YAAgBC,eAAK,CAAExB,UAAW,iB,gCIMxCyB,G,MAjB6B,SAAC,GAAD,QAC1CC,aAD0C,MAClC,GADkC,MAE1CC,gBAF0C,MAE/B,aAF+B,MAG1CC,kBAH0C,MAG7B,aAH6B,SAK1C,yBAAKC,UAAU,sBACb,uBAAGA,UAAU,gBACb,2BACEA,UAAU,aACVF,SAAUA,EACVC,WAAYA,EACZE,YAAY,oBACZJ,MAAOA,OCeEK,G,MA3B2B,SAAC,GAMD,IAAD,IALvCnC,YAKuC,MALhC,GAKgC,MAJvCW,mBAIuC,aAHvCyB,kBAGuC,MAH1B,aAG0B,MAFvCnC,UAEuC,MAFlC,EAEkC,MADvCoC,oBACuC,MADxB,aACwB,EASvC,OACE,wBAAIJ,UAAU,aACZ,uBACEA,UAAWtB,EAAc,2BAA6B,qBACtD2B,QAZqB,WACzBD,EAAapC,MAaX,0BAAMgC,UAAWtB,EAAc,iBAAmB,QAASX,GAC3D,uBAAGiC,UAAU,eAAeK,QAXP,WACvBF,EAAWnC,SCUAsC,G,MAnB2B,SAAC,GAAD,QACxCC,iBADwC,MAC5B,GAD4B,EAExCJ,EAFwC,EAExCA,WACAC,EAHwC,EAGxCA,aAHwC,OAKxC,wBAAIJ,UAAU,aACXO,EAAUzB,KAAI,gBAAGd,EAAH,EAAGA,GAAID,EAAP,EAAOA,KAAMW,EAAb,EAAaA,YAAb,OACb,kBAAC,EAAD,CACE8B,IAAKxC,EACLoC,aAAcA,EACdpC,GAAIA,EACJU,YAAaA,EACbyB,WAAYA,EACZpC,KAAMA,UCcC0C,G,MA3BuB,SAAC,GAAD,QACpCC,cADoC,MAC3B,EAD2B,MAEpCvB,oBAFoC,MAErB,MAFqB,MAGpCwB,oBAHoC,MAGrB,aAHqB,SAKpC,yBAAKX,UAAU,UACb,0BAAMA,UAAU,UAAhB,UAA6BU,EAA7B,gBACA,yBAAKV,UAAU,aACZlC,EAAYgB,KAAI,YAA8B,IAA3Bf,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,GAKxB,OACE,4BACEwC,IAAKxC,EACLgC,UAAWhC,IAAOmB,EAAe,oBAAsB,aACvDkB,QARuB,WACzBM,EAAa3C,KASVD,UC6DE6C,G,MA3EUC,aACvB,kBAAoC,CAClCxC,MADF,EAAGA,MAEDY,QAFF,EAAUA,WAIV,CAAE6B,QCdmB,SAAC/B,GAAD,MAAmC,CACxDR,KAAMX,EAAaY,SACnBC,QAAQ,eACHM,KDWMoB,WCPa,SAACnC,GAAD,MAAkC,CAC1DO,KAAMX,EAAae,YACnBF,QAAS,CACPT,QDIqBoC,aCAG,SAACpC,GAAD,MAAkC,CAC5DO,KAAMX,EAAaiB,cACnBJ,QAAS,CACPT,QDHmC2C,aCOX,SAACxB,GAAD,MAA6C,CACvEZ,KAAMX,EAAasB,cACnBT,QAAS,CACPU,mBD4DWyB,C,4MAlEJxD,MAAQ,CACf2D,SAAU,I,EAGZC,kBAAoB,YAAsE,IAAzDnB,EAAwD,EAAlEoB,OAAUpB,MAC/B,EAAKqB,SAAS,CACZH,SAAUlB,K,EAIdiB,QAAU,YAA2D,IAAxDN,EAAuD,EAAvDA,IACHO,EAAa,EAAK3D,MAAlB2D,SAEJA,EAASI,OAAS,GAAa,UAARX,KAOzBM,EANoB,EAAKM,MAAjBN,SACY,CAClB9C,IAAI,IAAIqD,MAAOC,UACfvD,KAAMgD,EACNrC,aAAa,IAGf,EAAKwC,SAAS,CACZH,SAAU,O,EAKhBQ,YAAc,SAAClD,EAAmBc,GAChC,OAAQA,GACN,IAAK,YACH,OAAOd,EAAMO,QAAO,qBAAGF,eACzB,IAAK,SACH,OAAOL,EAAMO,QAAO,qBAAGF,eACzB,QACE,OAAOL,I,EAIbmD,sBAAwB,SAACnD,GAAD,OACtBA,EAAMO,QAAO,qBAAGF,eAAgCyC,Q,uDAET,IAC/BJ,EAAaU,KAAKrE,MAAlB2D,SAD8B,EAE6BU,KAAKL,MAAhE/C,EAF8B,EAE9BA,MAAO8B,EAFuB,EAEvBA,WAAYC,EAFW,EAEXA,aAAcnB,EAFH,EAEGA,QAAS0B,EAFZ,EAEYA,aAC5Ce,EAAwBrD,GAASA,EAAM8C,OAAS,EAChDQ,EAA4BF,KAAKF,YAAYlD,EAAOY,GACpD2C,EAAsBH,KAAKD,sBAAsBnD,GAEvD,OACE,yBAAK2B,UAAU,gBACb,kBAAC,EAAD,CAAWF,SAAU2B,KAAKT,kBAAmBjB,WAAY0B,KAAKX,QAASjB,MAAOkB,IAC7EW,GACC,oCACE,kBAAC,EAAD,CACEtB,aAAcA,EACdD,WAAYA,EACZI,UAAWoB,IAEb,kBAAC,EAAD,CAAQxC,aAAcF,EAASyB,OAAQkB,EAAajB,aAAcA,U,GA3D3DkB,eEZJC,G,MAJqB,SAAC,GAAD,QAClCC,aADkC,MAC1B,eAD0B,SAEE,wBAAI/B,UAAU,SAAS+B,KCI9CC,EAPO,kBACpB,oCACE,kBAAC,EAAD,CAAOD,MAAM,aACb,kBAAC,EAAD,Q,MCEJE,IAASC,OACP,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAU1C,MAAOA,GACf,kBAAC,EAAD,QAGJ2C,SAASC,eAAe,SdYnB,SAAkB1F,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI0F,IAAIC,WAAwBlG,OAAOC,SAASkG,MACpDC,SAAWpG,OAAOC,SAASmG,OAIvC,OAGFpG,OAAOqG,iBAAiB,QAAQ,WAC9B,IAAMhG,EAAK,UAAM6F,WAAN,sBAEPpG,IAgEV,SAAiCO,EAAeC,GAE9CgG,MAAMjG,EAAO,CACXkG,QAAS,CAAE,iBAAkB,YAE5B7F,MAAK,SAAA8F,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBACjB,MAApBF,EAASG,QAAkC,MAAfF,IAAwBA,EAAYG,SAAS,cAE3ErG,UAAUC,cAAcqG,MAAMnG,MAAK,SAAAC,GACjCA,EAAamG,aAAapG,MAAK,WAC7BV,OAAOC,SAAS8G,eAKpB3G,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAnFV6F,CAAwB3G,EAAOC,GAI/BC,UAAUC,cAAcqG,MAAMnG,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OcrC/BE,K","file":"static/js/main.9c10d4a7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint-disable @typescript-eslint/prefer-regexp-exec */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n/* eslint-enable */\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\n/* eslint-disable no-console, no-param-reassign, @typescript-eslint/explicit-function-return-type */\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && !contentType.includes('javascript'))) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n/* eslint-enable */\n","import { FilterBtn } from '../types/constants';\n\nexport enum ACTION_TYPES {\n  ADD_TASK = 'ADD_TASK',\n  REMOVE_TASK = 'REMOVE_TASK',\n  COMPLETE_TASK = 'COMPLETE_TASK',\n  CHANGE_FILTER = 'CHANGE_FILTER',\n}\n\nexport const FILTERS_BTN: FilterBtn[] = [\n  {\n    text: 'All',\n    id: 'all',\n  },\n  {\n    text: 'Active',\n    id: 'active',\n  },\n  {\n    text: 'Completed',\n    id: 'completed',\n  },\n];\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport { save } from 'redux-localstorage-simple';\n\nimport rootReducer from '../reducers';\n\n/* eslint-disable no-underscore-dangle, @typescript-eslint/explicit-function-return-type */\nconst composeEnhancers =\n  process.env.NODE_ENV !== 'production' &&\n  typeof window === 'object' &&\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\n    : compose;\n\nconst configureStore = (preloadedState: any) =>\n  createStore(\n    rootReducer,\n    preloadedState,\n    composeEnhancers(applyMiddleware(save({ namespace: 'task-app' }))),\n  );\n/* eslint-enable */\n\nconst store = configureStore({});\n\nexport default store;\n","import { load } from 'redux-localstorage-simple';\n\nimport { ACTION_TYPES } from '../constants/constants';\n\nimport { TaskActionTypes } from '../types/actions';\nimport { stateTasks } from '../types/reducers';\n\nconst savedTasks: any = load({ namespace: 'task-app' });\n\nconst initialState: stateTasks = savedTasks && savedTasks.tasks ? savedTasks.tasks : [];\n\nconst tasks = (state = initialState, action: TaskActionTypes): stateTasks => {\n  switch (action.type) {\n    case ACTION_TYPES.ADD_TASK:\n      return [\n        ...state,\n        {\n          id: action.payload.id,\n          text: action.payload.text,\n          isCompleted: action.payload.isCompleted,\n        },\n      ];\n    case ACTION_TYPES.REMOVE_TASK:\n      return [...state].filter(({ id }) => id !== action.payload.id);\n    case ACTION_TYPES.COMPLETE_TASK:\n      return [...state].map(task =>\n        task.id === action.payload.id ? { ...task, isCompleted: !task.isCompleted } : task,\n      );\n    default:\n      return state;\n  }\n};\n\nexport default tasks;\n","import { load } from 'redux-localstorage-simple';\n\nimport { ACTION_TYPES } from '../constants/constants';\n\nimport { FilterActionType } from '../types/actions';\nimport { Filter } from '../types/store';\n\nconst savedFilters: any = load({ namespace: 'task-app' });\n\nconst initialState: Filter = savedFilters && savedFilters.filters ? savedFilters.filters : 'all';\n\nconst filter = (state = initialState, { type, payload }: FilterActionType): Filter => {\n  switch (type) {\n    case ACTION_TYPES.CHANGE_FILTER:\n      return payload.activeFilter;\n    default:\n      return state;\n  }\n};\n\nexport default filter;\n","import { combineReducers } from 'redux';\n\nimport tasks from './tasks';\nimport filters from './filters';\n\nconst rootReducer = combineReducers({ tasks, filters });\n\nexport default rootReducer;\n","import React from 'react';\n\nimport { ToDoInputProps } from './types';\n\nimport './todo-input.css';\n\nconst ToDoInput: React.FC<ToDoInputProps> = ({\n  value = '',\n  onChange = () => {},\n  onKeyPress = () => {},\n}): React.ReactElement<ToDoInputProps> => (\n  <div className=\"todo-input-wrapper\">\n    <i className=\"fas fa-plus\" />\n    <input\n      className=\"todo-input\"\n      onChange={onChange}\n      onKeyPress={onKeyPress}\n      placeholder=\"Click to add task\"\n      value={value}\n    />\n  </div>\n);\n\nexport default ToDoInput;\n","import React from 'react';\n\nimport { ToDoItemProps } from './types';\n\nimport './todo-item.css';\n\nconst ToDoItem: React.FC<ToDoItemProps> = ({\n  text = '',\n  isCompleted = false,\n  removeTask = () => {},\n  id = 0,\n  completeTask = () => {},\n}): React.ReactElement<ToDoItemProps> => {\n  const handleCompleteTask = (): void => {\n    completeTask(id);\n  };\n\n  const handleRemoveTask = (): void => {\n    removeTask(id);\n  };\n\n  return (\n    <li className=\"todo-item\">\n      <i\n        className={isCompleted ? 'mark far fa-check-circle' : 'mark far fa-circle'}\n        onClick={handleCompleteTask}\n      />\n      <span className={isCompleted ? 'completed text' : 'text'}>{text}</span>\n      <i className=\"fas fa-times\" onClick={handleRemoveTask} />\n    </li>\n  );\n};\n\nexport default ToDoItem;\n","import React from 'react';\n\nimport ToDoItem from '../todo-item/todo-item';\n\nimport { ITask } from '../../types/store';\nimport { ToDoListProps } from './types';\n\nimport './todo-list.css';\n\nconst ToDoList: React.FC<ToDoListProps> = ({\n  tasksList = [],\n  removeTask,\n  completeTask,\n}): React.ReactElement<ToDoListProps> => (\n  <ul className=\"todo-list\">\n    {tasksList.map(({ id, text, isCompleted }: ITask) => (\n      <ToDoItem\n        key={id}\n        completeTask={completeTask}\n        id={id}\n        isCompleted={isCompleted}\n        removeTask={removeTask}\n        text={text}\n      />\n    ))}\n  </ul>\n);\n\nexport default ToDoList;\n","import React from 'react';\n\nimport { FILTERS_BTN } from '../../constants/constants';\n\nimport { FilterBtn } from '../../types/constants';\nimport { FooterProps } from './types';\n\nimport './footer.css';\n\nconst Footer: React.FC<FooterProps> = ({\n  amount = 0,\n  activeFilter = 'all',\n  changeFilter = () => {},\n}): React.ReactElement<FooterProps> => (\n  <div className=\"footer\">\n    <span className=\"amount\">{`${amount} Tasks left`}</span>\n    <div className=\"btn-group\">\n      {FILTERS_BTN.map(({ text, id }: FilterBtn) => {\n        const handleChangeFilter = (): void => {\n          changeFilter(id);\n        };\n\n        return (\n          <button\n            key={id}\n            className={id === activeFilter ? 'filter-btn active' : 'filter-btn'}\n            onClick={handleChangeFilter}\n          >\n            {text}\n          </button>\n        );\n      })}\n    </div>\n  </div>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { addTask, removeTask, completeTask, changeFilter } from '../../actions/actionCreator';\nimport ToDoInput from '../../components/todo-input/todo-input';\nimport ToDoList from '../../components/todo-list/todo-list';\nimport Footer from '../../components/footer/footer';\n\nimport { Filter, ITask } from '../../types/store';\nimport { RootState, stateTasks } from '../../types/reducers';\nimport { ToDoProps, ToDoState } from './types';\n\nimport './todo.css';\n\nexport const connector = connect(\n  ({ tasks, filters }: RootState) => ({\n    tasks,\n    filters,\n  }),\n  { addTask, removeTask, completeTask, changeFilter },\n);\n\nclass ToDo extends Component<ToDoProps, ToDoState> {\n  readonly state = {\n    taskText: '',\n  };\n\n  handleInputChange = ({ target: { value } }: React.FocusEvent<HTMLInputElement>): void => {\n    this.setState({\n      taskText: value,\n    });\n  };\n\n  addTask = ({ key }: React.KeyboardEvent<HTMLInputElement>): void => {\n    const { taskText } = this.state;\n\n    if (taskText.length > 3 && key === 'Enter') {\n      const { addTask } = this.props;\n      const task: ITask = {\n        id: new Date().getTime(),\n        text: taskText,\n        isCompleted: false,\n      };\n      addTask(task);\n      this.setState({\n        taskText: '',\n      });\n    }\n  };\n\n  filterTasks = (tasks: stateTasks, activeFilter: Filter): stateTasks => {\n    switch (activeFilter) {\n      case 'completed':\n        return tasks.filter(({ isCompleted }) => isCompleted);\n      case 'active':\n        return tasks.filter(({ isCompleted }) => !isCompleted);\n      default:\n        return tasks;\n    }\n  };\n\n  getActiveTasksCounter = (tasks: stateTasks): number =>\n    tasks.filter(({ isCompleted }) => !isCompleted).length;\n\n  render(): React.ReactElement<ToDoProps> {\n    const { taskText } = this.state;\n    const { tasks, removeTask, completeTask, filters, changeFilter } = this.props;\n    const isTasksExist: boolean = tasks && tasks.length > 0;\n    const filteredTasks: stateTasks = this.filterTasks(tasks, filters);\n    const taskCounter: number = this.getActiveTasksCounter(tasks);\n\n    return (\n      <div className=\"todo-wrapper\">\n        <ToDoInput onChange={this.handleInputChange} onKeyPress={this.addTask} value={taskText} />\n        {isTasksExist && (\n          <>\n            <ToDoList\n              completeTask={completeTask}\n              removeTask={removeTask}\n              tasksList={filteredTasks}\n            />\n            <Footer activeFilter={filters} amount={taskCounter} changeFilter={changeFilter} />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default connector(ToDo);\n","import { ACTION_TYPES } from '../constants/constants';\n\nimport { TaskActionTypes, FilterActionType } from '../types/actions';\nimport { ITask, Filter } from '../types/store';\n\nexport const addTask = (task: ITask): TaskActionTypes => ({\n  type: ACTION_TYPES.ADD_TASK,\n  payload: {\n    ...task,\n  },\n});\n\nexport const removeTask = (id: number): TaskActionTypes => ({\n  type: ACTION_TYPES.REMOVE_TASK,\n  payload: {\n    id,\n  },\n});\n\nexport const completeTask = (id: number): TaskActionTypes => ({\n  type: ACTION_TYPES.COMPLETE_TASK,\n  payload: {\n    id,\n  },\n});\n\nexport const changeFilter = (activeFilter: Filter): FilterActionType => ({\n  type: ACTION_TYPES.CHANGE_FILTER,\n  payload: {\n    activeFilter,\n  },\n});\n","import React from 'react';\n\nimport { TitleProps } from './types';\n\nimport './title.css';\n\nconst Title: React.FC<TitleProps> = ({\n  title = 'Simple title',\n}): React.ReactElement<TitleProps> => <h1 className=\"title\">{title}</h1>;\n\nexport default Title;\n","import React from 'react';\n\nimport ToDo from './containers/todo/todo';\nimport Title from './components/title/title';\n\nconst App: React.FC = () => (\n  <>\n    <Title title=\"Task App\" />\n    <ToDo />\n  </>\n);\n\nexport default App;\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}