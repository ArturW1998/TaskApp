{"version":3,"sources":["serviceWorker.js","components/RendEdit/index.js","components/RendNorm/index.js","containers/Task/index.js","containers/App/index.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","RendEdit","_ref","children","newTxt","save","react_default","a","createElement","className","ref","defaultValue","onClick","defaultProps","RendNorm","edit","remove","Task","createRef","_this","setState","_this$props","props","update","index","current","value","_this$props2","deleteBlock","this","components_RendEdit","components_RendNorm","Component","App","tasks","add","_this$state","text","concat","push","i","task","confirm","splice","updateText","eachTask","item","containers_Task","key","map","ReactDOM","render","containers_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bda0d609.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          /* eslint-disable no-console */\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA');\n          /* eslint-enable */\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              /* eslint-disable no-console */\n              console.log('New content is available and will be used when all tabs for this page are closed. See http://bit.ly/CRA-PWA.');\n              /* eslint-enable */\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              /* eslint-disable no-console */\n              console.log('Content is cached for offline use.');\n              /* eslint-enable */\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      /* eslint-disable no-console */\n      console.error('Error during service worker registration:', error);\n      /* eslint-enable */\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      /* eslint-disable no-console */\n      console.log('No internet connection found. App is running in offline mode.');\n      /* eslint-enable */\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RendEdit = ({ children, newTxt, save }) => (\n  <div className=\"box\">\n    <textarea ref={newTxt} defaultValue={children} />\n    <button onClick={save} className=\"btn success\">\n      Save\n    </button>\n  </div>\n);\n\nRendEdit.propTypes = {\n  newTxt: PropTypes.object,\n  children: PropTypes.string,\n  save: PropTypes.func\n};\n\nRendEdit.defaultProps = {\n  newTxt: null,\n  children: 'Simple task №1',\n  save: () => {}\n};\n\nexport default RendEdit;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RendNorm = ({ children, edit, remove }) => (\n  <div className=\"box\">\n    <div className=\"text\">{children}</div>\n    <button onClick={edit} className=\"btn light\">\n      Edit\n    </button>\n    <button onClick={remove} className=\"btn red\">\n      Delete\n    </button>\n  </div>\n);\n\nRendNorm.propTypes = {\n  remove: PropTypes.func,\n  children: PropTypes.string,\n  edit: PropTypes.func\n};\n\nRendNorm.defaultProps = {\n  remove: () => {},\n  children: 'Simple task №1',\n  edit: () => {}\n};\n\nexport default RendNorm;\n","import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport RendEdit from '../../components/RendEdit';\nimport RendNorm from '../../components/RendNorm';\n\nclass Task extends Component {\n  state = { edit: false };\n\n  newTxt = createRef();\n\n  edit = () => {\n    this.setState({ edit: true });\n  };\n\n  save = () => {\n    const { update, index } = this.props;\n    const value = this.newTxt.current.value;\n\n    update(value, index);\n    this.setState({ edit: false });\n  };\n\n  remove = () => {\n    const { deleteBlock, index } = this.props;\n\n    deleteBlock(index);\n  };\n\n  render() {\n    const { edit } = this.state;\n    const { children } = this.props;\n\n    return edit ? (\n      <RendEdit save={this.save} newTxt={this.newTxt}>\n        {children}\n      </RendEdit>\n    ) : (\n      <RendNorm remove={this.remove} edit={this.edit}>\n        {children}\n      </RendNorm>\n    );\n  }\n}\n\nTask.propTypes = {\n  update: PropTypes.func,\n  deleteBlock: PropTypes.func,\n  index: PropTypes.number,\n  children: PropTypes.string\n};\n\nTask.defaultProps = {\n  update: () => {},\n  deleteBlock: () => {},\n  index: 0,\n  children: 'Simple task №1'\n};\n\nexport default Task;\n","import React, { Component } from 'react';\n\nimport Task from '../Task';\n\nimport './css/App.css';\n\nclass App extends Component {\n  state = {\n    tasks: [],\n    index: 1\n  };\n\n  add = () => {\n    const { tasks, index } = this.state;\n    const text = `Simple task №${index}`;\n\n    tasks.push(text);\n    this.setState(({ index }) => ({\n      tasks,\n      index: index + 1\n    }));\n  };\n\n  deleteBlock = i => {\n    const { tasks } = this.state;\n    const task = tasks[i];\n    const warning = window.confirm(`Do you want to delete '${task}' exactly?`);\n\n    if (warning) {\n      tasks.splice(i, 1);\n      this.setState({ tasks });\n    }\n  };\n\n  updateText = (text, i) => {\n    const { tasks } = this.state;\n\n    tasks[i] = text;\n    this.setState({ tasks });\n  };\n\n  eachTask = (item, i) => (\n    <Task key={i} index={i} update={this.updateText} deleteBlock={this.deleteBlock}>\n      {item}\n    </Task>\n  );\n\n  render() {\n    const { tasks } = this.state;\n\n    return (\n      <div className=\"field\">\n        <button onClick={this.add} className=\"btn new\">\n          New task\n        </button>\n        {tasks.map(this.eachTask)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}